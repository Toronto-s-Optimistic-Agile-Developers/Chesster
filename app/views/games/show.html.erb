class PiecesController < ApplicationController
  before_action :find_piece, only: [:update]

  
  def create
    @piece = game.pieces.create(piece_params)
    if @piece.valid?
      redirect_to games_path(@game)
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
  end

<<<<<<< HEAD
  </div>
  <div class="float-left" style="float-left">
  <% if @game.user_turn == 'black'%>
    <p class="black_turn"><%= @game.user_turn %></p>
  <% else %>
    <p class="white_turn"><%= @game.user_turn %></p>
  <% end %>
  </div>
  <br /><br />
  <div id="forfeit">
    <% if @game.in_play? %>
      <%= simple_form_for @game, url: forfeit_game_path(@game) do |f| %>
        <% if current_user.id == @game.white_id %>
          <%= f.input :winner, as: :hidden, :input_html => { :value => @game.black_id } %>
          <%= f.input :loser, as: :hidden, :input_html => { :value => @game.white_id } %>
        <% else %>
          <%= f.input :winner, as: :hidden, :input_html => { :value => @game.white_id } %>
          <%= f.input :loser, as: :hidden, :input_html => { :value => @game.black_id } %>
        <% end %>
        <%= f.submit "Forfeit", class: "forfeit", data: { confirm: "Are you sure you want to concede the game?"} %>
      <% end %>
    <% else %>
      <%= link_to 'Back', game_path(@game), method: :delete, class: 'btn btn-danger back', data: { confirm: "If you do this, the game will end before it begins. Are you sure?" } %>
    <% end %>
  </div>
  <script>
    $(document).ready(function () {
      $('[data-toggle="capture-instructions"]').tooltip();
    });
    var rotation = 0;
    jQuery.fn.rotate = function (degrees) {
      $(this).css({
        '-webkit-transform': 'rotate(' + degrees + 'deg)',
        '-moz-transform': 'rotate(' + degrees + 'deg)',
        '-ms-transform': 'rotate(' + degrees + 'deg)',
        'transform': 'rotate(' + degrees + 'deg)'
      });
    };
    $('#Flip_Board').click(function () {
      rotation -= 180;
      $('.set-board, .chess td, #labels td').rotate(rotation);
    });
    $(document).ready(function () {
      $('.piece').draggable({
        snap: '.droppable-tile',
        revert: 'invalid'
      });
      $('.droppable-tile').droppable({
        drop: function (event, ui) {
          var piece = ui.draggable
          var destination_square = $(this);
          console.log($(this))
          c = $(this)
          var update_piece = {
            id: piece.data('piece-id'),
            x_coord: destination_square.data('x-coord'),
            y_coord: destination_square.data('y-coord'),
            name: destination_square.data('name'),
          }
          $.ajax({
            type: 'PATCH',
            url: '/pieces/' + update_piece.id,
            beforeSend: function (xhr) {
              xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
            },
            dataType: 'json',
            data: {
              piece: {
                id: update_piece.id,
                x_coord: update_piece.x_coord,
                y_coord: update_piece.y_coord,
<<<<<<< HEAD
=======
                name: update_piece.name
>>>>>>> e9ca34ac6626ecf7968845d300c57d83eb6219c3
              }
            },
            success: function (data) {
              destination_square.empty();
              location.reload(true);
            }
          });
        }
      });
    });
  </script>
</body>
=======
  def update
    x_path = piece_params[:x_coord].to_i
    y_path = piece_params[:y_coord].to_i
    new_rank =  piece_params[:promotion_type].to_s
    if @piece.promotion? == true
      @piece.update(piece_params)
      @piece.pawn_promote(new_rank)
      redirect_to @game
      flash[:notice] = 'You have successfully promoted your pawn! Please refresh the page.'
      @game.reload
    elsif piece = @piece.name == "Black_King"
      if @piece.black_right_castle(x_path, y_path) == true 
        @piece.black_right_castle(x_path, y_path)
        flash[:notice] = 'You have successfully completed Castling.'
        @game.reload
      else
        @piece.white_left_castle(x_path, y_path)
        flash[:notice] = 'You have successfully completed Castling.'
        @game.reload
      end
    elsif @piece.name == "White_King"
      if @piece.white_right_castle(x_path, y_path) == true 
        @piece.white_right_castle(x_path, y_path)
        flash[:notice] = 'You have successfully completed Castling.'
        @game.reload
      else @piece.white_left_castle(x_path, y_path) == true
        @piece.white_left_castle(x_path, y_path)
        flash[:notice] = 'You have successfully completed Castling.'
        @game.reload
      end
    elsif @piece.valid_move?(x_path, y_path)
      @piece.move_to!(x_path, y_path)
      @piece.update(initial_position?: false)
      @piece.update_attributes(piece_params)
      respond_to do |format|
        format.html { render :show }
        format.json { render json: @piece, status: :ok }
      end
        @game.reload
        flash[:notice] = 'You move was successfully completed!'  
    end
    @game.reload
  end

  private

  def find_piece
    @piece = Piece.find(params[:id])
    @game = @piece.game
  end

  def piece_params
    params.require(:piece).permit(:id, :name, :color, :x_coord, :y_coord, :game_id, :player_id, :captured, :initial_position?, :promotion?, :promotion_type, :title)
  end
end
>>>>>>> 5228cff4d8b4e9b1a91381e25648112451a2a2e2
